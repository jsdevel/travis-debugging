function assertIsWebDriver(driver) {
  if (!(driver instanceof WebDriver)) {
    throw new Error("driver isn't an instance of WebDriver.");
  }
  return driver;
}
function assertIsNumber(num) {
  if (typeof num !== "number") {
    throw new Error("num isn't a number.");
  }
  return num;
}




/**
 * @constructor
 * @param {WebDriver} driver
 * @param {number} timeout in seconds
 * @param {number} sleep in mills
 */
function WebDriverWait(driver, timeout, sleep) {
  var wait;

  assertIsWebDriver(driver);
  assertIsNumber(timeout);
  if (sleep) {
    assertIsNumber(sleep);
  }


  switch (arguments.length) {
    case 2:
      wait = new WebDriverWaitClass(
        driver._driver,
        java.newInstanceSync("java.lang.Long", timeout)
        );
      break;
    case 3:
      wait = new WebDriverWaitClass(
        driver._driver,
        java.newInstanceSync("java.lang.Long", timeout),
        java.newInstanceSync("java.lang.Long", sleep)
        );
      break;
  }

  /**
   * Repeatedly applies this instance's input value to the given function until
   * one of the following occurs: the function returns neither null nor false,
   * the function throws an unignored exception, the timeout expires, the
   * current thread is interrupted.
   *
   * @param {ExpectedCondition} isTrue
   */
  this.until = function(isTrue) {
    return wait.untilSync(isTrue);
  };
  /**
   * Sets the message to be displayed when time expires.
   * @param {string} message
   */
  this.withMessage = function(message) {
    return wait.withMessageSync(message);
  };
}